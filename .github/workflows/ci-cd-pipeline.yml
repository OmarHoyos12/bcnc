name: CI Pipeline

on:
  push:
    branches:
      - master
      - feature/*
  pull_request:
    branches:
      - master
  workflow_dispatch: # Permite ejecución manual desde GitHub

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Clonar el código del repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar JDK (Java 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: temurin

      # 3. Compilar el proyecto con Gradle
      - name: Build Project
        run: ./gradlew build --no-daemon

      # 4. Ejecutar pruebas con Gradle
      - name: Run Tests
        run: ./gradlew test --no-daemon

      # 5. Generar reporte de cobertura con JaCoCo
      - name: Generate JaCoCo Coverage Report
        run: ./gradlew jacocoTestReport

      # 6. Verificar que la cobertura sea mayor al 20%
      - name: Verify Coverage > 20%
        run: |
          coverage=$(grep -oP '<counter type="INSTRUCTION".*' build/reports/jacoco/test/jacocoTestReport.xml | \
            sed -e 's/.*covered="\([^"]*\)".*missed="\([^"]*\)".*/\1 \2/' | \
            awk '{covered=$1; missed=$2; total=covered+missed; perc=covered*100/total; print perc}')
          echo "Coverage percentage: $coverage%"
          if (( $(echo "$coverage < 20.0" | bc -l) )); then
            echo "ERROR: Coverage is below 20%!"
            exit 1
          fi

      # 7. Ejecutar análisis de calidad con SonarQube
      - name: Run Sonar Analysis
        run: ./gradlew sonarqube
